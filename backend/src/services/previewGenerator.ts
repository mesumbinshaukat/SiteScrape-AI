import * as fs from 'fs/promises';
import * as path from 'path';
import logger from './loggerService';

export class PreviewGenerator {
  async generatePreview(jobId: string): Promise<string> {
    try {
      const projectPath = path.join(process.cwd(), 'projects', jobId);
      const scrapedHtmlPath = path.join(projectPath, 'scraped', 'html', 'index.html');
      const wpThemePath = path.join(projectPath, 'wp-theme');
      
      logger.info('Preview', 'Generating theme preview...');

      // Read the scraped HTML
      const originalHtml = await fs.readFile(scrapedHtmlPath, 'utf-8');
      
      // Create preview HTML with inline assets
      const previewHtml = await this.createPreviewHTML(originalHtml, projectPath, wpThemePath);
      
      // Save preview
      const previewPath = path.join(projectPath, 'preview.html');
      await fs.writeFile(previewPath, previewHtml);
      
      logger.success('Preview', `Preview generated at ${previewPath}`);
      
      return previewPath;
    } catch (error: any) {
      logger.error('Preview', 'Failed to generate preview', { error: error.message });
      throw error;
    }
  }

  private async createPreviewHTML(originalHtml: string, projectPath: string, wpThemePath: string): Promise<string> {
    let html = originalHtml;

    // Inline CSS
    const cssPath = path.join(wpThemePath, 'assets', 'css', 'main.css');
    try {
      const css = await fs.readFile(cssPath, 'utf-8');
      html = html.replace('</head>', `<style>${css}</style></head>`);
    } catch {}

    // Convert asset paths to base64 for images (first 10 only for performance)
    const imagesPath = path.join(wpThemePath, 'assets', 'images');
    try {
      const imageFiles = await fs.readdir(imagesPath);
      for (const file of imageFiles.slice(0, 10)) {
        const imagePath = path.join(imagesPath, file);
        const imageBuffer = await fs.readFile(imagePath);
        const base64 = imageBuffer.toString('base64');
        const ext = path.extname(file).substring(1);
        const mimeType = this.getMimeType(ext);
        const dataUrl = `data:${mimeType};base64,${base64}`;
        
        // Replace image references
        html = html.replace(new RegExp(file, 'g'), dataUrl);
      }
    } catch {}

    // Add preview banner
    const banner = `
    <div style="position: fixed; top: 0; left: 0; right: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px; text-align: center; z-index: 9999; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
      <h3 style="margin: 0; font-size: 18px; font-weight: 600;">ðŸŽ¨ Theme Preview</h3>
      <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.9;">This is a preview of your converted WordPress theme</p>
    </div>
    <div style="height: 80px;"></div>
    `;

    html = html.replace('<body>', `<body>${banner}`);

    // Add preview metadata
    const metadata = `
    <!-- Theme Preview Generated by SiteScape AI -->
    <!-- This is a static preview. Actual theme may differ slightly. -->
    <meta name="preview-generated" content="${new Date().toISOString()}">
    `;

    html = html.replace('</head>', `${metadata}</head>`);

    return html;
  }

  private getMimeType(ext: string): string {
    const mimeTypes: Record<string, string> = {
      'jpg': 'image/jpeg',
      'jpeg': 'image/jpeg',
      'png': 'image/png',
      'gif': 'image/gif',
      'svg': 'image/svg+xml',
      'webp': 'image/webp',
      'ico': 'image/x-icon'
    };
    return mimeTypes[ext.toLowerCase()] || 'image/jpeg';
  }

  async getPreviewUrl(jobId: string): Promise<string> {
    return `/api/preview/${jobId}`;
  }
}

export default new PreviewGenerator();
